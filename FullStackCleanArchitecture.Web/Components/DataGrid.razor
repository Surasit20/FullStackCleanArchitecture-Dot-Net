@using FullStackCleanArchitecture.Web.Managers.Employee
@inject IEmployeeManger EmployeeManger
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

@if (DataSource != null && DataSource.Count() > 0)
{
    <table class="table">
        <thead>
            <tr>
                <th scope="col">Id</th>
                <th scope="col">First Name</th>
                <th scope="col">Last Name</th>
                <th scope="col">Edit</th>
                <th scope="col">Delete</th>
            </tr>
        </thead>
        <tbody>

            @foreach (var item in DataSource)
            {
                <tr>
                    <th scope="row">@item.EmployeeId</th>
                    <td>@item.FirstName</td>
                    <td>@item.LastName</td>
                    <td><button type="button" class="btn btn-primary" @onclick="@((e)=>OnEdit(item.EmployeeId))" data-bs-toggle="modal" data-bs-target="#exampleModal">Edit</button></td>
                    <td><button type="button" class="btn btn-danger" @onclick="@((e)=>OnDelete(item.EmployeeId))">Delete</button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public IEnumerable<EmployeeDto>? DataSource { get; set; }
    [Parameter]
    public EventCallback<int> OnEditCallback { get; set; }

    private int key { get; set; }
    private async Task OnDelete(int Id)
    {
        try
        {
            var res = await EmployeeManger.DeleteAsync(Id);
            if (res.Succeeded == true)
            {
                NavigationManager.Refresh(forceReload: true);
            }
        }
        catch(Exception ex)
        {

        }

        await Task.FromResult(0);
    }

    private async Task OnEdit(int Id)
    {
        await OnEditCallback.InvokeAsync(Id);

        await Task.FromResult(0);
    }
}